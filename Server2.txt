#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <mysql/mysql.h>

#define MAX_CONNECTIONS 10
#define BUFFER_SIZE 1024

void handle_client(int client_socket, MYSQL* mysql);
void execute_query(MYSQL* mysql, const char* query, char* response);

int main(int argc, char* argv[])
{
    int server_socket, client_socket;
    struct sockaddr_in server_address, client_address;
    unsigned int client_address_length = sizeof(client_address);
    MYSQL* mysql;

    // Create the socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Bind the socket to a specific IP and port
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(8080);
    if (bind(server_socket, (struct sockaddr*) &server_address, sizeof(server_address)) < 0)
    {
        perror("Error binding socket");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, MAX_CONNECTIONS) < 0)
    {
        perror("Error listening for connections");
        exit(EXIT_FAILURE);
    }

    // Connect to the MySQL database
    mysql = mysql_init(NULL);
    if (!mysql_real_connect(mysql, "localhost", "root", "yourpassword", "ChessDB", 0, NULL, 0))
    {
        fprintf(stderr, "Error connecting to database: %s\n", mysql_error(mysql));
        exit(EXIT_FAILURE);
    }

    // Accept and handle incoming connections
    while (1)
    {
        printf("Waiting for incoming connections...\n");

        if ((client_socket = accept(server_socket, (struct sockaddr*) &client_address, &client_address_length)) < 0)
        {
            perror("Error accepting connection");
            continue;
        }

        printf("Accepted connection from %s:%d\n", inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));

        handle_client(client_socket, mysql);

        close(client_socket);
        printf("Closed connection from %s:%d\n", inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));
    }

    mysql_close(mysql);
    close(server_socket);

    return 0;
}

void handle_client(int client_socket, MYSQL* mysql)
{
    char buffer[BUFFER_SIZE], response[BUFFER_SIZE];
    int read_size;

    while ((read_size = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0)
    {
        buffer[read_size] = '\0';
        printf("Received message: %s\n", buffer);

        execute_query(mysql, buffer, response);

        if (send(client_socket, response, strlen(response), 0) < 0)
        {
            perror("Error sending response");
            break;
        }

        printf("Sent response: %s\n", response);
    }

    if (read_size == 0)
    {
        printf("Client disconnected\n");
    }
    else if (read_size == -1)
    {
        perror("Error receiving message");
    }
}

void execute_query(MYSQL* mysql, const char* query, char* response)
{
    MYSQL_RES* result;
    MYSQL_ROW row;
    int num_fields, i;

    if (mysql_query(mysql, query))
    {
        sprintf(response, "Error executing query: %s",
